
chunk       ::= stmt* EOF

stmt        ::= block
              | var_decl ';'
              | assign ';'
              | NAME call ';'
              | 'delete' NAME subscr* subscr ';'
              | 'if' '(' expr ')' stmt ( 'else' stmt )?
              | 'loop' block
              | 'while' '(' expr ')' stmt
              | 'do' stmt 'while' '(' expr ')' ';'
              | 'for' '(' var_decl | assign? ';' expr? ';' assign? ')' stmt
              | 'continue' ';'
              | 'break' ';'

block       ::= '{' stmt* '}'

var_decl    ::= 'var' NAME ( '=' expr )?
              | 'var' '[' NAME ( ',' NAME )* ']' '=' expr

assign      ::= NAME subscr* ( '=' | '+=' | '-=' | '*=' | '/=' | '%=' ) expr
              | NAME subscr* ( '++' | '--' )
              | NAME subscr* '[' ']' '=' expr ';'
              | NAME subscr* subscr '=' expr ';'

subscr      ::= '[' expr ']'

call        ::= '(' ( expr ( ',' expr )* )? ')'

expr        ::= and_expr ( '||' and_expr )*

and_expr    ::= equal_expr ( '&&' equal_expr )*

equal_expr  ::= comp_expr ( ( '==' | '!=' ) comp_expr )*

comp_expr   ::= add_expr ( ( '>' | '>=' | '<' | '<=' ) add_expr )*

add_expr    ::= mul_expr ( ( '+' | '-' ) mul_expr )*

mul_expr    ::= unary_expr ( ( '*' | '/' | '%' ) unary_expr )*

unary_expr  ::= ( '+' | '-' | '!' ) unary_expr | prim_expr

prim_expr   ::= 'null' | 'false' | 'true' | INT | FLOAT | STRING
              | '[' ( expr ( ',' expr )* )? ']'
              | NAME ( subscr | call )*
              | '(' expr ')'
